// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RookiesFashion.APIService.Data.Context;

#nullable disable

namespace RookiesFashion.APIService.Data.Migrations
{
    [DbContext(typeof(RookiesFashionContext))]
    partial class RookiesFashionContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ColorProduct", b =>
                {
                    b.Property<int>("ColorsColorId")
                        .HasColumnType("int");

                    b.Property<int>("ProductsProductId")
                        .HasColumnType("int");

                    b.HasKey("ColorsColorId", "ProductsProductId");

                    b.HasIndex("ProductsProductId");

                    b.ToTable("ColorProduct");

                    b.HasData(
                        new
                        {
                            ColorsColorId = 1,
                            ProductsProductId = 1
                        },
                        new
                        {
                            ColorsColorId = 1,
                            ProductsProductId = 2
                        },
                        new
                        {
                            ColorsColorId = 1,
                            ProductsProductId = 3
                        },
                        new
                        {
                            ColorsColorId = 1,
                            ProductsProductId = 5
                        },
                        new
                        {
                            ColorsColorId = 2,
                            ProductsProductId = 1
                        },
                        new
                        {
                            ColorsColorId = 2,
                            ProductsProductId = 2
                        },
                        new
                        {
                            ColorsColorId = 2,
                            ProductsProductId = 3
                        },
                        new
                        {
                            ColorsColorId = 2,
                            ProductsProductId = 5
                        },
                        new
                        {
                            ColorsColorId = 3,
                            ProductsProductId = 1
                        },
                        new
                        {
                            ColorsColorId = 3,
                            ProductsProductId = 2
                        },
                        new
                        {
                            ColorsColorId = 3,
                            ProductsProductId = 3
                        },
                        new
                        {
                            ColorsColorId = 3,
                            ProductsProductId = 5
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ProductSize", b =>
                {
                    b.Property<int>("ProductsProductId")
                        .HasColumnType("int");

                    b.Property<int>("SizesSizeId")
                        .HasColumnType("int");

                    b.HasKey("ProductsProductId", "SizesSizeId");

                    b.HasIndex("SizesSizeId");

                    b.ToTable("ProductSize");

                    b.HasData(
                        new
                        {
                            ProductsProductId = 1,
                            SizesSizeId = 1
                        },
                        new
                        {
                            ProductsProductId = 2,
                            SizesSizeId = 1
                        },
                        new
                        {
                            ProductsProductId = 3,
                            SizesSizeId = 1
                        },
                        new
                        {
                            ProductsProductId = 5,
                            SizesSizeId = 1
                        },
                        new
                        {
                            ProductsProductId = 1,
                            SizesSizeId = 2
                        },
                        new
                        {
                            ProductsProductId = 2,
                            SizesSizeId = 2
                        },
                        new
                        {
                            ProductsProductId = 3,
                            SizesSizeId = 2
                        },
                        new
                        {
                            ProductsProductId = 5,
                            SizesSizeId = 2
                        },
                        new
                        {
                            ProductsProductId = 1,
                            SizesSizeId = 3
                        },
                        new
                        {
                            ProductsProductId = 2,
                            SizesSizeId = 3
                        },
                        new
                        {
                            ProductsProductId = 3,
                            SizesSizeId = 3
                        },
                        new
                        {
                            ProductsProductId = 5,
                            SizesSizeId = 3
                        });
                });

            modelBuilder.Entity("RookiesFashion.APIService.Models.Account", b =>
                {
                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(450)")
                        .HasColumnName("Username");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Username");

                    b.ToTable("Account");
                });

            modelBuilder.Entity("RookiesFashion.APIService.Models.Category", b =>
                {
                    b.Property<int>("CategoryId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryId"), 1L, 1);

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<bool>("IsParent")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ParentCategoryId")
                        .HasColumnType("int");

                    b.HasKey("CategoryId");

                    b.HasIndex("ParentCategoryId");

                    b.ToTable("Category");

                    b.HasData(
                        new
                        {
                            CategoryId = 1,
                            Description = "Topwear",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Topwear"
                        },
                        new
                        {
                            CategoryId = 2,
                            Description = "T-Shirts",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "T-Shirts",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CategoryId = 3,
                            Description = "Casual Shirts",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Casual Shirts",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CategoryId = 4,
                            Description = "Formal Shirts",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Formal Shirts",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CategoryId = 5,
                            Description = "Sweatshirts",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Sweatshirts",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CategoryId = 6,
                            Description = "Sweaters",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Sweaters",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CategoryId = 7,
                            Description = "Jackets",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Jackets",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CategoryId = 8,
                            Description = "Blazers & Coats",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Blazers & Coats",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CategoryId = 9,
                            Description = "Suits",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Suits",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CategoryId = 10,
                            Description = "Rain Jackets",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Rain Jackets",
                            ParentCategoryId = 1
                        },
                        new
                        {
                            CategoryId = 11,
                            Description = "Indian & Festive Wear",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Indian & Festive Wear"
                        },
                        new
                        {
                            CategoryId = 12,
                            Description = "Kurtas & Kurta Sets",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Kurtas & Kurta Sets",
                            ParentCategoryId = 11
                        },
                        new
                        {
                            CategoryId = 13,
                            Description = "Sherwanis",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Sherwanis",
                            ParentCategoryId = 11
                        },
                        new
                        {
                            CategoryId = 14,
                            Description = "Nehru Jackets",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Nehru Jackets",
                            ParentCategoryId = 11
                        },
                        new
                        {
                            CategoryId = 15,
                            Description = "Dhotis",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Dhotis",
                            ParentCategoryId = 11
                        },
                        new
                        {
                            CategoryId = 16,
                            Description = "Bottomwear",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Bottomwear"
                        },
                        new
                        {
                            CategoryId = 17,
                            Description = "Jeans",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Jeans",
                            ParentCategoryId = 16
                        },
                        new
                        {
                            CategoryId = 18,
                            Description = "Casual Trousers",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Casual Trousers",
                            ParentCategoryId = 16
                        },
                        new
                        {
                            CategoryId = 19,
                            Description = "Formal Trousers",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Formal Trousers",
                            ParentCategoryId = 16
                        },
                        new
                        {
                            CategoryId = 20,
                            Description = "Shorts",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Shorts",
                            ParentCategoryId = 16
                        },
                        new
                        {
                            CategoryId = 21,
                            Description = "Track Pants & Joggers",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Track Pants & Joggers",
                            ParentCategoryId = 16
                        },
                        new
                        {
                            CategoryId = 22,
                            Description = "Innerwear & Sleepwear",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Innerwear & Sleepwear"
                        },
                        new
                        {
                            CategoryId = 23,
                            Description = "Briefs & Trunks",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Briefs & Trunks",
                            ParentCategoryId = 22
                        },
                        new
                        {
                            CategoryId = 24,
                            Description = "Boxers",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Boxers",
                            ParentCategoryId = 22
                        },
                        new
                        {
                            CategoryId = 25,
                            Description = "Vests",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Vests",
                            ParentCategoryId = 22
                        },
                        new
                        {
                            CategoryId = 26,
                            Description = "Sleepwear & Loungewear",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Sleepwear & Loungewear",
                            ParentCategoryId = 22
                        },
                        new
                        {
                            CategoryId = 27,
                            Description = "Thermals",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Thermals",
                            ParentCategoryId = 22
                        },
                        new
                        {
                            CategoryId = 28,
                            Description = "Plus Size",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Plus Size"
                        },
                        new
                        {
                            CategoryId = 29,
                            Description = "Footwear",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Footwear"
                        },
                        new
                        {
                            CategoryId = 30,
                            Description = "Casual Shoes",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Casual Shoes",
                            ParentCategoryId = 29
                        },
                        new
                        {
                            CategoryId = 31,
                            Description = "Sports Shoes",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Sports Shoes",
                            ParentCategoryId = 29
                        },
                        new
                        {
                            CategoryId = 32,
                            Description = "Formal Shoes",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Formal Shoes",
                            ParentCategoryId = 29
                        },
                        new
                        {
                            CategoryId = 33,
                            Description = "Sneakers",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Sneakers",
                            ParentCategoryId = 29
                        },
                        new
                        {
                            CategoryId = 34,
                            Description = "Sandals & Floaters",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Sandals & Floaters",
                            ParentCategoryId = 29
                        },
                        new
                        {
                            CategoryId = 35,
                            Description = "Flip Flops",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Flip Flops",
                            ParentCategoryId = 29
                        },
                        new
                        {
                            CategoryId = 36,
                            Description = "Socks",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Socks",
                            ParentCategoryId = 29
                        },
                        new
                        {
                            CategoryId = 37,
                            Description = "Personal Care & Grooming",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Personal Care & Grooming"
                        },
                        new
                        {
                            CategoryId = 38,
                            Description = "Sunglasses & Frames",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Sunglasses & Frames"
                        },
                        new
                        {
                            CategoryId = 39,
                            Description = "Watches",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Watches"
                        },
                        new
                        {
                            CategoryId = 40,
                            Description = "Sports & Active Wear",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Sports & Active Wear"
                        },
                        new
                        {
                            CategoryId = 41,
                            Description = "Sports Shoes",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Sports Shoes",
                            ParentCategoryId = 40
                        },
                        new
                        {
                            CategoryId = 42,
                            Description = "Sports Sandals",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Sports Sandals",
                            ParentCategoryId = 40
                        },
                        new
                        {
                            CategoryId = 43,
                            Description = "Active T-Shirts",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Active T-Shirts",
                            ParentCategoryId = 40
                        },
                        new
                        {
                            CategoryId = 44,
                            Description = "Track Pants & Shorts",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Track Pants & Shorts",
                            ParentCategoryId = 40
                        },
                        new
                        {
                            CategoryId = 45,
                            Description = "Tracksuits",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Tracksuits",
                            ParentCategoryId = 40
                        },
                        new
                        {
                            CategoryId = 46,
                            Description = "Jackets & Sweatshirts",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Jackets & Sweatshirts",
                            ParentCategoryId = 40
                        },
                        new
                        {
                            CategoryId = 47,
                            Description = "Sports Accessories",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Sports Accessories",
                            ParentCategoryId = 40
                        },
                        new
                        {
                            CategoryId = 48,
                            Description = "Swimwear",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Swimwear",
                            ParentCategoryId = 40
                        },
                        new
                        {
                            CategoryId = 49,
                            Description = "Gadgets",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Gadgets"
                        },
                        new
                        {
                            CategoryId = 50,
                            Description = "Smart Wearables",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Smart Wearables",
                            ParentCategoryId = 49
                        },
                        new
                        {
                            CategoryId = 51,
                            Description = "Fitness Gadgets",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Fitness Gadgets",
                            ParentCategoryId = 49
                        },
                        new
                        {
                            CategoryId = 52,
                            Description = "Headphones",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Headphones",
                            ParentCategoryId = 49
                        },
                        new
                        {
                            CategoryId = 53,
                            Description = "Speakers",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Speakers",
                            ParentCategoryId = 49
                        },
                        new
                        {
                            CategoryId = 54,
                            Description = "Fashion Accessories",
                            IsDeleted = false,
                            IsParent = true,
                            Name = "Fashion Accessories"
                        },
                        new
                        {
                            CategoryId = 55,
                            Description = "Wallets",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Wallets",
                            ParentCategoryId = 54
                        },
                        new
                        {
                            CategoryId = 56,
                            Description = "Belts",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Belts",
                            ParentCategoryId = 54
                        },
                        new
                        {
                            CategoryId = 57,
                            Description = "Perfumes & Body Mists",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Perfumes & Body Mists",
                            ParentCategoryId = 54
                        },
                        new
                        {
                            CategoryId = 58,
                            Description = "Trimmers",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Trimmers",
                            ParentCategoryId = 54
                        },
                        new
                        {
                            CategoryId = 59,
                            Description = "Deodorants",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Deodorants",
                            ParentCategoryId = 54
                        },
                        new
                        {
                            CategoryId = 60,
                            Description = "Ties, Cufflinks & Pocket Squares",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Ties, Cufflinks & Pocket Squares",
                            ParentCategoryId = 54
                        },
                        new
                        {
                            CategoryId = 61,
                            Description = "Accessory Gift Sets",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Accessory Gift Sets",
                            ParentCategoryId = 54
                        },
                        new
                        {
                            CategoryId = 62,
                            Description = "Caps & Hats",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Caps & Hats",
                            ParentCategoryId = 54
                        },
                        new
                        {
                            CategoryId = 63,
                            Description = "Mufflers, Scarves & Gloves",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Mufflers, Scarves & Gloves",
                            ParentCategoryId = 54
                        },
                        new
                        {
                            CategoryId = 64,
                            Description = "Phone Cases",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Phone Cases",
                            ParentCategoryId = 54
                        },
                        new
                        {
                            CategoryId = 65,
                            Description = "Rings & Wristwear",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Rings & Wristwear",
                            ParentCategoryId = 54
                        },
                        new
                        {
                            CategoryId = 66,
                            Description = "Helmets",
                            IsDeleted = false,
                            IsParent = false,
                            Name = "Helmets",
                            ParentCategoryId = 54
                        });
                });

            modelBuilder.Entity("RookiesFashion.APIService.Models.Color", b =>
                {
                    b.Property<int>("ColorId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ColorId"), 1L, 1);

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ThumbnailImageId")
                        .HasColumnType("int");

                    b.HasKey("ColorId");

                    b.HasIndex("ThumbnailImageId");

                    b.ToTable("Color");

                    b.HasData(
                        new
                        {
                            ColorId = 1,
                            Name = "Black",
                            ThumbnailImageId = 1
                        },
                        new
                        {
                            ColorId = 2,
                            Name = "Red",
                            ThumbnailImageId = 2
                        },
                        new
                        {
                            ColorId = 3,
                            Name = "White",
                            ThumbnailImageId = 3
                        });
                });

            modelBuilder.Entity("RookiesFashion.APIService.Models.Image", b =>
                {
                    b.Property<int>("ImageId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ImageId"), 1L, 1);

                    b.Property<string>("Extension")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ImageName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.HasKey("ImageId");

                    b.HasIndex("ProductId");

                    b.ToTable("Image");

                    b.HasData(
                        new
                        {
                            ImageId = 4,
                            Extension = "jpg",
                            ImageName = "yzsjv9f3zxeam2qrmsa5",
                            ProductId = 1
                        },
                        new
                        {
                            ImageId = 5,
                            Extension = "jpg",
                            ImageName = "qqxtq42ju9u3f7xvqx41",
                            ProductId = 1
                        },
                        new
                        {
                            ImageId = 6,
                            Extension = "jpg",
                            ImageName = "iyfpc8zlmsh3hpwhem8r",
                            ProductId = 2
                        },
                        new
                        {
                            ImageId = 7,
                            Extension = "jpg",
                            ImageName = "wojbmn440oja7afudapp",
                            ProductId = 2
                        },
                        new
                        {
                            ImageId = 8,
                            Extension = "jpg",
                            ImageName = "vjcyk00mvrrhadxdvgev",
                            ProductId = 3
                        },
                        new
                        {
                            ImageId = 9,
                            Extension = "jpg",
                            ImageName = "buomsanrphup1hkzgwkg",
                            ProductId = 3
                        },
                        new
                        {
                            ImageId = 12,
                            Extension = "jpg",
                            ImageName = "anllsn2gzufgiv0s6hgo",
                            ProductId = 5
                        },
                        new
                        {
                            ImageId = 13,
                            Extension = "jpg",
                            ImageName = "oivszjvq5ccl1xsbnous",
                            ProductId = 5
                        },
                        new
                        {
                            ImageId = 1,
                            Extension = "png",
                            ImageName = "black_ecjeap"
                        },
                        new
                        {
                            ImageId = 2,
                            Extension = "png",
                            ImageName = "red_e8saf2"
                        },
                        new
                        {
                            ImageId = 3,
                            Extension = "png",
                            ImageName = "white_s8f0yl"
                        });
                });

            modelBuilder.Entity("RookiesFashion.APIService.Models.Product", b =>
                {
                    b.Property<int>("ProductId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductId"), 1L, 1);

                    b.Property<int?>("CategoryId")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.Property<double?>("Price")
                        .HasColumnType("float");

                    b.HasKey("ProductId");

                    b.HasIndex("CategoryId");

                    b.ToTable("Product");

                    b.HasData(
                        new
                        {
                            ProductId = 1,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2022, 3, 24, 9, 29, 32, 651, DateTimeKind.Local).AddTicks(6281),
                            Description = "Kids grow up so fast. Your little one may still be an infant, but we're sure they're crying for something stylish, comfortable, and eco-friendly. Well, you can satisfy their \"demands\" with this practical, organic Unisex..",
                            IsDeleted = false,
                            Name = "Unisex Baby Long Sleeve Bodysuits Set",
                            Price = 35.0
                        },
                        new
                        {
                            ProductId = 2,
                            CategoryId = 1,
                            CreatedDate = new DateTime(2022, 3, 24, 9, 29, 32, 651, DateTimeKind.Local).AddTicks(6284),
                            Description = "Long Sleeve 3D Printed Black Cat Sweatshirt",
                            IsDeleted = false,
                            Name = "Long Sleeve 3D Printed Black Cat Sweatshirt",
                            Price = 55.0
                        },
                        new
                        {
                            ProductId = 3,
                            CategoryId = 3,
                            CreatedDate = new DateTime(2022, 3, 24, 9, 29, 32, 651, DateTimeKind.Local).AddTicks(6286),
                            Description = "Look like the super star that you are while rocking this unisex Dreamville Street Wear Sweatshirt! It was made just for you.",
                            IsDeleted = false,
                            Name = "Dreamville Street Wear Sweatshirt",
                            Price = 55.0
                        },
                        new
                        {
                            ProductId = 5,
                            CategoryId = 2,
                            CreatedDate = new DateTime(2022, 3, 24, 9, 29, 32, 651, DateTimeKind.Local).AddTicks(6288),
                            Description = "Get the perfect wooden watch for yourself or a loved one - including a unique engraving in the back! This classic piece will match any outfit. NOTE: This watch is only available in the United States. ",
                            IsDeleted = false,
                            Name = "Walnut Wooden Watch",
                            Price = 98.0
                        });
                });

            modelBuilder.Entity("RookiesFashion.APIService.Models.Rating", b =>
                {
                    b.Property<int>("RatingId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RatingId"), 1L, 1);

                    b.Property<string>("Comment")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ProductId")
                        .HasColumnType("int");

                    b.Property<int>("RatingVal")
                        .HasColumnType("int");

                    b.Property<string>("UserRating")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("RatingId");

                    b.HasIndex("ProductId");

                    b.ToTable("Rating");

                    b.HasData(
                        new
                        {
                            RatingId = 1,
                            Comment = "Nice one, i love this product",
                            CreatedDate = new DateTime(2022, 3, 24, 9, 29, 32, 651, DateTimeKind.Local).AddTicks(6992),
                            ProductId = 1,
                            RatingVal = 4,
                            UserRating = "user1"
                        },
                        new
                        {
                            RatingId = 2,
                            Comment = "Very beautiful and affordable price",
                            CreatedDate = new DateTime(2022, 3, 24, 9, 29, 32, 651, DateTimeKind.Local).AddTicks(6995),
                            ProductId = 1,
                            RatingVal = 4,
                            UserRating = "user2"
                        },
                        new
                        {
                            RatingId = 3,
                            Comment = "The watch make me feel very elegant",
                            CreatedDate = new DateTime(2022, 3, 24, 9, 29, 32, 651, DateTimeKind.Local).AddTicks(6996),
                            ProductId = 2,
                            RatingVal = 3,
                            UserRating = "user1"
                        },
                        new
                        {
                            RatingId = 4,
                            Comment = "Very beautiful and affordable price",
                            CreatedDate = new DateTime(2022, 3, 24, 9, 29, 32, 651, DateTimeKind.Local).AddTicks(6996),
                            ProductId = 2,
                            RatingVal = 3,
                            UserRating = "user2"
                        },
                        new
                        {
                            RatingId = 5,
                            Comment = "The watch make me feel very elegant",
                            CreatedDate = new DateTime(2022, 3, 24, 9, 29, 32, 651, DateTimeKind.Local).AddTicks(6997),
                            ProductId = 2,
                            RatingVal = 5,
                            UserRating = "user1"
                        },
                        new
                        {
                            RatingId = 6,
                            Comment = "Very beautiful and affordable price",
                            CreatedDate = new DateTime(2022, 3, 24, 9, 29, 32, 651, DateTimeKind.Local).AddTicks(6999),
                            ProductId = 2,
                            RatingVal = 4,
                            UserRating = "user2"
                        },
                        new
                        {
                            RatingId = 7,
                            Comment = "The watch make me feel very elegant",
                            CreatedDate = new DateTime(2022, 3, 24, 9, 29, 32, 651, DateTimeKind.Local).AddTicks(7000),
                            ProductId = 3,
                            RatingVal = 2,
                            UserRating = "user1"
                        },
                        new
                        {
                            RatingId = 8,
                            Comment = "Very beautiful and affordable price",
                            CreatedDate = new DateTime(2022, 3, 24, 9, 29, 32, 651, DateTimeKind.Local).AddTicks(7001),
                            ProductId = 3,
                            RatingVal = 3,
                            UserRating = "user2"
                        },
                        new
                        {
                            RatingId = 9,
                            Comment = "The watch make me feel very elegant",
                            CreatedDate = new DateTime(2022, 3, 24, 9, 29, 32, 651, DateTimeKind.Local).AddTicks(7002),
                            ProductId = 5,
                            RatingVal = 3,
                            UserRating = "user1"
                        },
                        new
                        {
                            RatingId = 10,
                            Comment = "Very beautiful and affordable price",
                            CreatedDate = new DateTime(2022, 3, 24, 9, 29, 32, 651, DateTimeKind.Local).AddTicks(7003),
                            ProductId = 5,
                            RatingVal = 4,
                            UserRating = "user2"
                        },
                        new
                        {
                            RatingId = 11,
                            Comment = "The watch make me feel very elegant",
                            CreatedDate = new DateTime(2022, 3, 24, 9, 29, 32, 651, DateTimeKind.Local).AddTicks(7003),
                            ProductId = 2,
                            RatingVal = 5,
                            UserRating = "user1"
                        },
                        new
                        {
                            RatingId = 12,
                            Comment = "Very beautiful and affordable price",
                            CreatedDate = new DateTime(2022, 3, 24, 9, 29, 32, 651, DateTimeKind.Local).AddTicks(7004),
                            ProductId = 1,
                            RatingVal = 3,
                            UserRating = "user2"
                        },
                        new
                        {
                            RatingId = 13,
                            Comment = "The watch make me feel very elegant",
                            CreatedDate = new DateTime(2022, 3, 24, 9, 29, 32, 651, DateTimeKind.Local).AddTicks(7005),
                            ProductId = 5,
                            RatingVal = 2,
                            UserRating = "user1"
                        },
                        new
                        {
                            RatingId = 14,
                            Comment = "Very beautiful and affordable price",
                            CreatedDate = new DateTime(2022, 3, 24, 9, 29, 32, 651, DateTimeKind.Local).AddTicks(7005),
                            ProductId = 1,
                            RatingVal = 5,
                            UserRating = "user2"
                        },
                        new
                        {
                            RatingId = 15,
                            Comment = "The watch make me feel very elegant",
                            CreatedDate = new DateTime(2022, 3, 24, 9, 29, 32, 651, DateTimeKind.Local).AddTicks(7006),
                            ProductId = 5,
                            RatingVal = 4,
                            UserRating = "user1"
                        },
                        new
                        {
                            RatingId = 16,
                            Comment = "Very beautiful and affordable price",
                            CreatedDate = new DateTime(2022, 3, 24, 9, 29, 32, 651, DateTimeKind.Local).AddTicks(7007),
                            ProductId = 3,
                            RatingVal = 3,
                            UserRating = "user2"
                        });
                });

            modelBuilder.Entity("RookiesFashion.APIService.Models.Size", b =>
                {
                    b.Property<int>("SizeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SizeId"), 1L, 1);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SizeId");

                    b.ToTable("Size");

                    b.HasData(
                        new
                        {
                            SizeId = 1,
                            Name = "XL"
                        },
                        new
                        {
                            SizeId = 2,
                            Name = "XXL"
                        },
                        new
                        {
                            SizeId = 3,
                            Name = "L"
                        });
                });

            modelBuilder.Entity("RookiesFashion.APIService.Models.UpdatedDate", b =>
                {
                    b.Property<int>("UpdatedDateId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UpdatedDateId"), 1L, 1);

                    b.Property<int?>("ProductId")
                        .HasColumnType("int");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime2");

                    b.HasKey("UpdatedDateId");

                    b.HasIndex("ProductId");

                    b.ToTable("UpdatedDate");
                });

            modelBuilder.Entity("RookiesFashion.APIService.Models.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("ColorProduct", b =>
                {
                    b.HasOne("RookiesFashion.APIService.Models.Color", null)
                        .WithMany()
                        .HasForeignKey("ColorsColorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RookiesFashion.APIService.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("RookiesFashion.APIService.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("RookiesFashion.APIService.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RookiesFashion.APIService.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("RookiesFashion.APIService.Models.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ProductSize", b =>
                {
                    b.HasOne("RookiesFashion.APIService.Models.Product", null)
                        .WithMany()
                        .HasForeignKey("ProductsProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("RookiesFashion.APIService.Models.Size", null)
                        .WithMany()
                        .HasForeignKey("SizesSizeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("RookiesFashion.APIService.Models.Category", b =>
                {
                    b.HasOne("RookiesFashion.APIService.Models.Category", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentCategoryId");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("RookiesFashion.APIService.Models.Color", b =>
                {
                    b.HasOne("RookiesFashion.APIService.Models.Image", "Thumbnail")
                        .WithMany()
                        .HasForeignKey("ThumbnailImageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Thumbnail");
                });

            modelBuilder.Entity("RookiesFashion.APIService.Models.Image", b =>
                {
                    b.HasOne("RookiesFashion.APIService.Models.Product", "Product")
                        .WithMany("Thumbnail")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RookiesFashion.APIService.Models.Product", b =>
                {
                    b.HasOne("RookiesFashion.APIService.Models.Category", "Category")
                        .WithMany("Products")
                        .HasForeignKey("CategoryId");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("RookiesFashion.APIService.Models.Rating", b =>
                {
                    b.HasOne("RookiesFashion.APIService.Models.Product", "Product")
                        .WithMany("Ratings")
                        .HasForeignKey("ProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RookiesFashion.APIService.Models.UpdatedDate", b =>
                {
                    b.HasOne("RookiesFashion.APIService.Models.Product", "Product")
                        .WithMany("UpdatedDates")
                        .HasForeignKey("ProductId");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("RookiesFashion.APIService.Models.Category", b =>
                {
                    b.Navigation("Children");

                    b.Navigation("Products");
                });

            modelBuilder.Entity("RookiesFashion.APIService.Models.Product", b =>
                {
                    b.Navigation("Ratings");

                    b.Navigation("Thumbnail");

                    b.Navigation("UpdatedDates");
                });
#pragma warning restore 612, 618
        }
    }
}
